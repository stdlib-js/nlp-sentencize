{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport tokenize from '@stdlib/nlp-tokenize';\nimport trim from '@stdlib/string-base-trim';\n\n\n// VARIABLES //\n\nvar RE_CAPITALIZED = /^[A-Z][a-z]{0,4}$/;\nvar RE_CAPITALIZED_PERIOD = /^([A-Z]\\.)*[A-Z]$/;\nvar RE_NUMBER = /^[0-9]$/;\nvar RE_PREFIXES = /^[{[(<:;\"'”`]/;\nvar RE_SUFFIXES = /[})\\]>:;\"'”`]$/;\n\n\n// FUNCTIONS //\n\n/**\n* Checks whether the token at a specified index is an end-of-sentence token.\n*\n* ## Notes\n*\n* -   The function uses a set of heuristics to determine whether a token is an end-of-sentence token.\n* -   Periods (`.`), exclamation points (`!`), and question marks (`?`). are treated as possible end-of-sentence tokens.\n* -   The function expects that the input array of tokens has been tokenized using the `@stdlib/nlp/tokenize` function, which tokenizes a string into an array of tokens and handles titles (`Dr.`, etc.), abbreviations such as `e.g.`, and the like, keeping them as single tokens. For example, the string `Dr. Smith is a professor at MIT.` is tokenized as `['Dr.', 'Smith', 'is', 'a', 'professor', 'at', 'MIT', '.']`. This function henceforth only considers standalone characters as possible end-of-sentence tokens, and does not consider them as end-of-sentence tokens if they are part of a larger token.\n*\n* @private\n* @param {StringArray} tokens - array of tokens\n* @param {NonNegativeInteger} i - index\n* @returns {boolean} boolean indicating whether the token at a specified index is an end-of-sentence token\n*/\nfunction isEndOfSentence( tokens, i ) {\n\tvar token;\n\tvar im1 = i - 1;\n\tvar ip1 = i + 1;\n\ttoken = tokens[ i ];\n\tif (\n\t\ttoken === '.' &&\n\t\t!RE_CAPITALIZED.test( tokens[ im1 ] ) && // for other short abbreviations and bullet points\n\t\t!RE_CAPITALIZED_PERIOD.test( tokens[ im1 ] ) && // acronyms of the form A.B.C.\n\t\t!RE_NUMBER.test( tokens[ im1 ] ) && // numbered list items\n\t\t!RE_PREFIXES.test( tokens[ im1 ] ) &&\n\t\t!RE_SUFFIXES.test( tokens[ ip1 ] )\n\t) {\n\t\treturn true;\n\t}\n\tif (\n\t\t( token === '!' || token === '?' ) &&\n\t\t!RE_PREFIXES.test( tokens[ im1 ] ) &&\n\t\t!RE_SUFFIXES.test( tokens[ ip1 ] )\n\t) {\n\t\treturn true;\n\t}\n\tif (\n\t\tRE_SUFFIXES.test( token ) &&\n\t\t( tokens[ im1 ] === '.' || tokens[ im1 ] === '!' || tokens[ im1 ] === '?' )\n\t) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n\n// MAIN //\n\n/**\n* Splits a string into an array of sentences.\n*\n* @param {string} str - input string\n* @throws {TypeError} must provide a string\n* @returns {StringArray} array of sentences\n*\n* @example\n* var str = 'Hello World! How are you?';\n* var out = sentencize( str );\n* // returns [ 'Hello World!', 'How are you?' ]\n*\n* @example\n* var str = '';\n* var out = sentencize( str );\n* // returns []\n*\n* @example\n* var str = 'Hello Mrs. Maple, could you call me back?';\n* var out = sentencize( str );\n* // returns [ 'Hello Mrs. Maple, could you call me back?' ]\n*/\nfunction sentencize( str ) {\n\tvar current;\n\tvar tokens;\n\tvar out;\n\tvar i;\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a string. Value: `' + str + '`.' );\n\t}\n\ttokens = tokenize( str, true );\n\tcurrent = '';\n\tout = [];\n\tfor ( i = 0; i < tokens.length; i++ ) {\n\t\tcurrent += tokens[ i ];\n\t\tif ( isEndOfSentence( tokens, i ) ) {\n\t\t\tout.push( trim( current ) );\n\t\t\tcurrent = '';\n\t\t}\n\t}\n\tif ( current !== '' ) {\n\t\tout.push( trim( current ) );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default sentencize;\n"],"names":["RE_CAPITALIZED","RE_CAPITALIZED_PERIOD","RE_NUMBER","RE_PREFIXES","RE_SUFFIXES","isEndOfSentence","tokens","i","token","im1","ip1","test","sentencize","str","current","out","isString","TypeError","tokenize","length","push","trim"],"mappings":";;4RA6BA,IAAIA,EAAiB,oBACjBC,EAAwB,oBACxBC,EAAY,UACZC,EAAc,gBACdC,EAAc,iBAmBlB,SAASC,EAAiBC,EAAQC,GACjC,IAAIC,EACAC,EAAMF,EAAI,EACVG,EAAMH,EAAI,EAEd,QACW,OAFXC,EAAQF,EAAQC,KAGdP,EAAeW,KAAML,EAAQG,KAC7BR,EAAsBU,KAAML,EAAQG,KACpCP,EAAUS,KAAML,EAAQG,KACxBN,EAAYQ,KAAML,EAAQG,KAC1BL,EAAYO,KAAML,EAAQI,SAKf,MAAVF,GAA2B,MAAVA,GAClBL,EAAYQ,KAAML,EAAQG,KAC1BL,EAAYO,KAAML,EAAQI,SAK3BN,EAAYO,KAAMH,IACE,MAAlBF,EAAQG,IAAmC,MAAlBH,EAAQG,IAAmC,MAAlBH,EAAQG,IAK9D,CA2BA,SAASG,EAAYC,GACpB,IAAIC,EACAR,EACAS,EACAR,EACJ,IAAMS,EAAUH,GACf,MAAM,IAAII,UAAW,oDAAsDJ,EAAM,MAKlF,IAHAP,EAASY,EAAUL,GAAK,GACxBC,EAAU,GACVC,EAAM,GACAR,EAAI,EAAGA,EAAID,EAAOa,OAAQZ,IAC/BO,GAAWR,EAAQC,GACdF,EAAiBC,EAAQC,KAC7BQ,EAAIK,KAAMC,EAAMP,IAChBA,EAAU,IAMZ,MAHiB,KAAZA,GACJC,EAAIK,KAAMC,EAAMP,IAEVC,CACR"}